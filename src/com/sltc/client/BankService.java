
package com.sltc.client;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BankService", targetNamespace = "http://BankService.services.ramesh/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BankService {


    /**
     * 
     * @param firstName
     * @param lastName
     * @param address
     * @param nic
     * @param phoneNo
     * @return
     *     returns com.sltc.client.CreateAccountRes
     * @throws InvalidInputValues_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createAccount", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.CreateAccount")
    @ResponseWrapper(localName = "createAccountResponse", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.CreateAccountResponse")
    @Action(input = "http://BankService.services.ramesh/BankService/createAccountRequest", output = "http://BankService.services.ramesh/BankService/createAccountResponse", fault = {
        @FaultAction(className = InvalidInputValues_Exception.class, value = "http://BankService.services.ramesh/BankService/createAccount/Fault/InvalidInputValues")
    })
    public CreateAccountRes createAccount(
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "phoneNo", targetNamespace = "")
        String phoneNo,
        @WebParam(name = "address", targetNamespace = "")
        String address,
        @WebParam(name = "NIC", targetNamespace = "")
        String nic)
        throws InvalidInputValues_Exception
    ;

    /**
     * 
     * @param accountId
     * @param passCode
     * @param withdrawAmount
     * @return
     *     returns double
     * @throws CantFindTheAccount_Exception
     * @throws InsufficientBalance_Exception
     * @throws InvalidInputValues_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "withdrawMoney", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.WithdrawMoney")
    @ResponseWrapper(localName = "withdrawMoneyResponse", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.WithdrawMoneyResponse")
    @Action(input = "http://BankService.services.ramesh/BankService/withdrawMoneyRequest", output = "http://BankService.services.ramesh/BankService/withdrawMoneyResponse", fault = {
        @FaultAction(className = CantFindTheAccount_Exception.class, value = "http://BankService.services.ramesh/BankService/withdrawMoney/Fault/CantFindTheAccount"),
        @FaultAction(className = InvalidInputValues_Exception.class, value = "http://BankService.services.ramesh/BankService/withdrawMoney/Fault/InvalidInputValues"),
        @FaultAction(className = InsufficientBalance_Exception.class, value = "http://BankService.services.ramesh/BankService/withdrawMoney/Fault/InsufficientBalance")
    })
    public double withdrawMoney(
        @WebParam(name = "accountId", targetNamespace = "")
        String accountId,
        @WebParam(name = "passCode", targetNamespace = "")
        String passCode,
        @WebParam(name = "withdrawAmount", targetNamespace = "")
        double withdrawAmount)
        throws CantFindTheAccount_Exception, InsufficientBalance_Exception, InvalidInputValues_Exception
    ;

    /**
     * 
     * @param transferAccountId
     * @param transferAmount
     * @param passCode
     * @param receiverAccountId
     * @return
     *     returns double
     * @throws CantFindTheAccount_Exception
     * @throws InsufficientBalance_Exception
     * @throws InvalidInputValues_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "transferMoney", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.TransferMoney")
    @ResponseWrapper(localName = "transferMoneyResponse", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.TransferMoneyResponse")
    @Action(input = "http://BankService.services.ramesh/BankService/transferMoneyRequest", output = "http://BankService.services.ramesh/BankService/transferMoneyResponse", fault = {
        @FaultAction(className = CantFindTheAccount_Exception.class, value = "http://BankService.services.ramesh/BankService/transferMoney/Fault/CantFindTheAccount"),
        @FaultAction(className = InvalidInputValues_Exception.class, value = "http://BankService.services.ramesh/BankService/transferMoney/Fault/InvalidInputValues"),
        @FaultAction(className = InsufficientBalance_Exception.class, value = "http://BankService.services.ramesh/BankService/transferMoney/Fault/InsufficientBalance")
    })
    public double transferMoney(
        @WebParam(name = "transferAccountId", targetNamespace = "")
        String transferAccountId,
        @WebParam(name = "receiverAccountId", targetNamespace = "")
        String receiverAccountId,
        @WebParam(name = "passCode", targetNamespace = "")
        String passCode,
        @WebParam(name = "transferAmount", targetNamespace = "")
        double transferAmount)
        throws CantFindTheAccount_Exception, InsufficientBalance_Exception, InvalidInputValues_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<com.sltc.client.BaseAccount>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAccounts", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.GetAccounts")
    @ResponseWrapper(localName = "getAccountsResponse", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.GetAccountsResponse")
    @Action(input = "http://BankService.services.ramesh/BankService/getAccountsRequest", output = "http://BankService.services.ramesh/BankService/getAccountsResponse")
    public List<BaseAccount> getAccounts();

    /**
     * 
     * @param depositAmount
     * @param accountId
     * @param passCode
     * @return
     *     returns double
     * @throws CantFindTheAccount_Exception
     * @throws InvalidInputValues_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "depositMoney", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.DepositMoney")
    @ResponseWrapper(localName = "depositMoneyResponse", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.DepositMoneyResponse")
    @Action(input = "http://BankService.services.ramesh/BankService/depositMoneyRequest", output = "http://BankService.services.ramesh/BankService/depositMoneyResponse", fault = {
        @FaultAction(className = CantFindTheAccount_Exception.class, value = "http://BankService.services.ramesh/BankService/depositMoney/Fault/CantFindTheAccount"),
        @FaultAction(className = InvalidInputValues_Exception.class, value = "http://BankService.services.ramesh/BankService/depositMoney/Fault/InvalidInputValues")
    })
    public double depositMoney(
        @WebParam(name = "accountId", targetNamespace = "")
        String accountId,
        @WebParam(name = "passCode", targetNamespace = "")
        String passCode,
        @WebParam(name = "depositAmount", targetNamespace = "")
        double depositAmount)
        throws CantFindTheAccount_Exception, InvalidInputValues_Exception
    ;

    /**
     * 
     * @param accountId
     * @param passCode
     * @return
     *     returns double
     * @throws CantFindTheAccount_Exception
     * @throws InvalidInputValues_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkAccountBalance", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.CheckAccountBalance")
    @ResponseWrapper(localName = "checkAccountBalanceResponse", targetNamespace = "http://BankService.services.ramesh/", className = "com.sltc.client.CheckAccountBalanceResponse")
    @Action(input = "http://BankService.services.ramesh/BankService/checkAccountBalanceRequest", output = "http://BankService.services.ramesh/BankService/checkAccountBalanceResponse", fault = {
        @FaultAction(className = CantFindTheAccount_Exception.class, value = "http://BankService.services.ramesh/BankService/checkAccountBalance/Fault/CantFindTheAccount"),
        @FaultAction(className = InvalidInputValues_Exception.class, value = "http://BankService.services.ramesh/BankService/checkAccountBalance/Fault/InvalidInputValues")
    })
    public double checkAccountBalance(
        @WebParam(name = "accountId", targetNamespace = "")
        String accountId,
        @WebParam(name = "passCode", targetNamespace = "")
        String passCode)
        throws CantFindTheAccount_Exception, InvalidInputValues_Exception
    ;

}
